### This file was generated by Nexus Schema
### Do not make changes to this file directly


interface ClientError {
  message: String!
  path: [String!]
}

type ClientErrorAlreadyInWorkspace implements ClientError {
  message: String!
  path: [String!]
}

type ClientErrorNameAlreadyTaken implements ClientError {
  message: String!
  path: [String!]
}

type ClientErrorNameInvalid implements ClientError {
  message: String!
  path: [String!]
}

type ClientErrorNotAuthorized implements ClientError {
  message: String!
  path: [String!]
}

type ClientErrorWorkspaceNotFound implements ClientError {
  message: String!
  path: [String!]
}

union CreateProjectClientError = ClientErrorNameAlreadyTaken | ClientErrorNameInvalid | ClientErrorNotAuthorized | ClientErrorWorkspaceNotFound

type CreateProjectClientErrors {
  errors: [CreateProjectClientError!]!
}

input CreateProjectInput {
  displayName: String
  name: String
  workspaceId: ID!
}

union CreateProjectResult = CreateProjectClientErrors | Project

union CreateWorkspaceError = ClientErrorNameAlreadyTaken | ClientErrorNameInvalid

type CreateWorkspaceErrors {
  errors: [CreateWorkspaceError!]!
}

input CreateWorkspaceInput {
  displayName: String
  name: String
}

union CreateWorkspaceResult = CreateWorkspaceErrors | Workspace

input DeleteWorkspaceInput {
  id: ID!
}

input InviteUserInput {
  role: WorkspaceRole!
  userId: ID!
  workspaceId: ID!
}

union InviteUserToWorkspaceError = ClientErrorAlreadyInWorkspace | ClientErrorWorkspaceNotFound

type InviteUserToWorkspaceErrors {
  errors: [InviteUserToWorkspaceError!]!
}

union InviteUserToWorkspaceResult = InviteUserToWorkspaceErrors | Workspace

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectResult!
  createWorkspace(input: CreateWorkspaceInput): CreateWorkspaceResult!
  deleteWorkspace(input: DeleteWorkspaceInput!): Workspace!
  inviteUserToWorkspace(input: InviteUserInput!): Workspace!
}

type Project {
  displayName: String!
  id: ID!
  memberships: [ProjectMembership!]!
  name: String!
}

type ProjectMembership {
  id: ID!
  role: ProjectRole!
  user: User!
}

enum ProjectRole {
  admin
  developer
}

type Query {
  me: User!
}

type User {
  displayName: String!
  email: Boolean!
  email2: Boolean!
  id: ID!
  image: String
  projects: [Project!]!
  workspaces: [Workspace!]!
}

type Workspace {
  displayName: String!
  id: ID!
  memberships: [WorkspaceMembership!]!
  name: String!
  projects: [Project!]!
}

type WorkspaceMembership {
  id: ID!
  role: WorkspaceRole!
  user: User!
}

enum WorkspaceRole {
  admin
  developer
}
